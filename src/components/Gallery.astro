---
import { getLangFromUrl, useTranslations } from '@/i18n';
import fs from 'node:fs';

export type TParams = {
  slug: string;
};

const { slug } = Astro.params as TParams;

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);

const images = fs.readdirSync('./public/images/' + slug + '/');

function parseImagePath(image: string): string {
  return `/images/${slug}/${image}`;
}
---

<div class="gallery__container">
  {
    images.map((image, id) => (
      <>
        <a
          href={`#${slug}-${id}`}
          id={`i${slug}-${id}`}
          class="gallery__image-link"
        >
          <img src={parseImagePath(image)} class="gallery__image" />
        </a>
        <div class="gallery__preview-container" id={`${slug}-${id}`}>
          <div class="gallery__preview-image-container">
            <div class="gallery__preview-navigation gallery__preview-navigation--end">
              <a href="#" class="gallery__preview-navigation-link">
                {t('gallery.close')}
              </a>
            </div>
            <img src={parseImagePath(image)} class="gallery__preview-image" />
            <div class="gallery__preview-navigation">
              <a
                href={`#${slug}-${id - 1}`}
                class="gallery__preview-navigation-link"
                class:list={[
                  { 'gallery__preview-navigation-link--visible-off': id <= 0 },
                ]}
              >
                {t('gallery.prev')}
              </a>
              <a
                href={`#${slug}-${id + 1}`}
                class="gallery__preview-navigation-link"
                class:list={[
                  {
                    'gallery__preview-navigation-link--visible-off':
                      id + 1 >= images.length,
                  },
                ]}
              >
                {t('gallery.next')}
              </a>
            </div>
          </div>
        </div>
      </>
    ))
  }
</div>

<style lang="scss">
  .gallery {
    &__container {
      display: grid;
      grid-template-columns: repeat(auto-fill, minmax(190px, 1fr));
      grid-template-rows: 100px;
      gap: 0.5rem;
    }
    &__image {
      width: 100%;
      height: 100%;
      object-position: center;
      object-fit: cover;
      overflow: hidden;
      border-radius: 0.5rem;
      transition: 0.2s transform;
      &-link {
        width: 100%;
        height: 100px;
        overflow: hidden;
        border-radius: 0.5rem;
      }
      &-link:hover & {
        transform: scale(1.1);
      }
    }
    &__preview {
      &-container {
        display: none;
        position: fixed;
        width: 100%;
        height: 100vh;
        top: 0;
        left: 0;
        z-index: 50;
        padding: 30px 0;
        background-color: rgba(0, 0, 0, 0.8);
        &:target {
          display: flex;
          flex-direction: column;
          align-items: center;
        }
      }
      &-image {
        width: 100%;
        max-height: 100%;
        height: auto;
        object-position: center;
        object-fit: contain;
        &-container {
          max-width: 95%;
          margin: auto 0;
          max-height: calc(100vh - 130px * 2);
        }
      }
      &-navigation {
        display: flex;
        justify-content: space-between;
        width: 100%;
        visibility: visible;
        margin: 5px 0;
        &-link {
          display: inline-block;
          color: var(--main-text);
          &--visible-off {
            visibility: hidden;
          }
        }
        &--end {
          justify-content: flex-end;
        }
      }
    }
  }
  @media screen only and (min-width: 640px) {
    .gallery__container {
      grid-template-columns: repeat(3, minmax(0, 1fr));
      grid-template-rows: 100px;
    }
  }
</style>
